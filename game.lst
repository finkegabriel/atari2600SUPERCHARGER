------- FILE hello.asm LEVEL 1 PASS 2
      1  10000 ????						;
      2  10000 ????						; hello.asm
      3  10000 ????						;
      4  10000 ????						; A "Hello, World!" which illustrates an Atari 2600 programming
      5  10000 ????						; introduction talk (slides at http://slideshare.net/chesterbr).
      6  10000 ????						;
      7  10000 ????						; This is free software (see license below). Build it with DASM
      8  10000 ????						; (http://dasm-dillon.sourceforge.net/), by running:
      9  10000 ????						;
     10  10000 ????						;   dasm hello.asm -ohello.bin -f3
     11  10000 ????						;
     12  10000 ????
     13  10000 ????				       PROCESSOR	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       INCLUDE	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined,
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE hello.asm
     15  10000 ????
     16  f000					      ORG	$F000	; Start of "cart area" (see Atari memory map)
     17  f000
     18  f000				   StartFrame
     19  f000		       a9 02		      lda	#%00000010	; Vertical sync is signaled by VSYNC's bit 1...
     20  f002		       85 00		      sta	VSYNC
     21  f004					      REPEAT	3	; ...and lasts 3 scanlines
     22  f004		       85 02		      sta	WSYNC	; (WSYNC write => wait for end of scanline)
     21  f004					      REPEND
     22  f006		       85 02		      sta	WSYNC	; (WSYNC write => wait for end of scanline)
     21  f006					      REPEND
     22  f008		       85 02		      sta	WSYNC	; (WSYNC write => wait for end of scanline)
     23  f00a					      REPEND
     24  f00a		       a9 00		      lda	#0
     25  f00c		       85 00		      sta	VSYNC	; Signal vertical sync by clearing the bit
     26  f00e
     27  f00e				   PreparePlayfield		; We'll use the first VBLANK scanline for setup
     28  f00e		       a9 00		      lda	#$00	; (could have done it before, just once)
     29  f010		       85 1f		      sta	ENABL	; Turn off ball, missiles and players
     30  f012		       85 1d		      sta	ENAM0
     31  f014		       85 1e		      sta	ENAM1
     32  f016		       85 1b		      sta	GRP0
     33  f018		       85 1c		      sta	GRP1
     34  f01a		       85 09		      sta	COLUBK	; Background color (black)
     35  f01c		       85 0d		      sta	PF0	; PF0 and PF2 will be "off" (we'll focus on PF1)...
     36  f01e		       85 0f		      sta	PF2
     37  f020		       a9 ff		      lda	#$FF	; Playfield collor (yellow-ish)
     38  f022		       85 08		      sta	COLUPF
     39  f024		       a9 00		      lda	#$00	; Ensure we will duplicate (and not reflect) PF
     40  f026		       85 0a		      sta	CTRLPF
     41  f028		       a2 00		      ldx	#0	; X will count visible scanlines, let's reset it
     42  f02a					      REPEAT	37	; Wait until this (and the other 36) vertical blank
     43  f02a		       85 02		      sta	WSYNC	; scanlines are finished
     42  f02a					      REPEND
     43  f02c		       85 02		      sta	WSYNC	; scanlines are finished
     42  f02c					      REPEND
     43  f02e		       85 02		      sta	WSYNC	; scanlines are finished
     42  f02e					      REPEND
     43  f030		       85 02		      sta	WSYNC	; scanlines are finished
     42  f030					      REPEND
     43  f032		       85 02		      sta	WSYNC	; scanlines are finished
     42  f032					      REPEND
     43  f034		       85 02		      sta	WSYNC	; scanlines are finished
     42  f034					      REPEND
     43  f036		       85 02		      sta	WSYNC	; scanlines are finished
     42  f036					      REPEND
     43  f038		       85 02		      sta	WSYNC	; scanlines are finished
     42  f038					      REPEND
     43  f03a		       85 02		      sta	WSYNC	; scanlines are finished
     42  f03a					      REPEND
     43  f03c		       85 02		      sta	WSYNC	; scanlines are finished
     42  f03c					      REPEND
     43  f03e		       85 02		      sta	WSYNC	; scanlines are finished
     42  f03e					      REPEND
     43  f040		       85 02		      sta	WSYNC	; scanlines are finished
     42  f040					      REPEND
     43  f042		       85 02		      sta	WSYNC	; scanlines are finished
     42  f042					      REPEND
     43  f044		       85 02		      sta	WSYNC	; scanlines are finished
     42  f044					      REPEND
     43  f046		       85 02		      sta	WSYNC	; scanlines are finished
     42  f046					      REPEND
     43  f048		       85 02		      sta	WSYNC	; scanlines are finished
     42  f048					      REPEND
     43  f04a		       85 02		      sta	WSYNC	; scanlines are finished
     42  f04a					      REPEND
     43  f04c		       85 02		      sta	WSYNC	; scanlines are finished
     42  f04c					      REPEND
     43  f04e		       85 02		      sta	WSYNC	; scanlines are finished
     42  f04e					      REPEND
     43  f050		       85 02		      sta	WSYNC	; scanlines are finished
     42  f050					      REPEND
     43  f052		       85 02		      sta	WSYNC	; scanlines are finished
     42  f052					      REPEND
     43  f054		       85 02		      sta	WSYNC	; scanlines are finished
     42  f054					      REPEND
     43  f056		       85 02		      sta	WSYNC	; scanlines are finished
     42  f056					      REPEND
     43  f058		       85 02		      sta	WSYNC	; scanlines are finished
     42  f058					      REPEND
     43  f05a		       85 02		      sta	WSYNC	; scanlines are finished
     42  f05a					      REPEND
     43  f05c		       85 02		      sta	WSYNC	; scanlines are finished
     42  f05c					      REPEND
     43  f05e		       85 02		      sta	WSYNC	; scanlines are finished
     42  f05e					      REPEND
     43  f060		       85 02		      sta	WSYNC	; scanlines are finished
     42  f060					      REPEND
     43  f062		       85 02		      sta	WSYNC	; scanlines are finished
     42  f062					      REPEND
     43  f064		       85 02		      sta	WSYNC	; scanlines are finished
     42  f064					      REPEND
     43  f066		       85 02		      sta	WSYNC	; scanlines are finished
     42  f066					      REPEND
     43  f068		       85 02		      sta	WSYNC	; scanlines are finished
     42  f068					      REPEND
     43  f06a		       85 02		      sta	WSYNC	; scanlines are finished
     42  f06a					      REPEND
     43  f06c		       85 02		      sta	WSYNC	; scanlines are finished
     42  f06c					      REPEND
     43  f06e		       85 02		      sta	WSYNC	; scanlines are finished
     42  f06e					      REPEND
     43  f070		       85 02		      sta	WSYNC	; scanlines are finished
     42  f070					      REPEND
     43  f072		       85 02		      sta	WSYNC	; scanlines are finished
     44  f074					      REPEND
     45  f074		       a9 00		      lda	#0	; Vertical blank is done, we can "turn on" the beam
     46  f076		       85 01		      sta	VBLANK
     47  f078
     48  f078				   Scanline
     49  f078		       e0 ae		      cpx	#174	; "HELLO WORLD" = (11 chars x 8 lines - 1) x 2 scanlines =
     50  f07a		       b0 08		      bcs	ScanlineEnd	;   174 (0 to 173). After that, skip drawing code
     51  f07c		       8a		      txa		; We want each byte of the hello world phrase on 2 scanlines,
     52  f07d		       4a		      lsr		;   which means Y (bitmap counter) = X (scanline counter) / 2.
     53  f07e		       a8		      tay		;   For division by two we use (A-only) right-shift
     54  f07f		       b9 ce f0 	      lda	Phrase,y	; "Phrase,Y" = mem(Phrase+Y) (Y-th address after Phrase)
     55  f082		       85 0e		      sta	PF1	; Put the value on PF bits 4-11 (0-3 is PF0, 12-15 is PF2)
     56  f084				   ScanlineEnd
     57  f084		       85 02		      sta	WSYNC	; Wait for scanline end
     58  f086		       e8		      inx		; Increase counter; repeat untill we got all kernel scanlines
     59  f087		       e0 bf		      cpx	#191
     60  f089		       d0 ed		      bne	Scanline
     61  f08b
     62  f08b				   Overscan
     63  f08b		       a9 42		      lda	#%01000010	; "turn off" the beam again...
     64  f08d		       85 01		      sta	VBLANK	;
     65  f08f					      REPEAT	30	; ...for 30 overscan scanlines...
     66  f08f		       85 02		      sta	WSYNC
     65  f08f					      REPEND
     66  f091		       85 02		      sta	WSYNC
     65  f091					      REPEND
     66  f093		       85 02		      sta	WSYNC
     65  f093					      REPEND
     66  f095		       85 02		      sta	WSYNC
     65  f095					      REPEND
     66  f097		       85 02		      sta	WSYNC
     65  f097					      REPEND
     66  f099		       85 02		      sta	WSYNC
     65  f099					      REPEND
     66  f09b		       85 02		      sta	WSYNC
     65  f09b					      REPEND
     66  f09d		       85 02		      sta	WSYNC
     65  f09d					      REPEND
     66  f09f		       85 02		      sta	WSYNC
     65  f09f					      REPEND
     66  f0a1		       85 02		      sta	WSYNC
     65  f0a1					      REPEND
     66  f0a3		       85 02		      sta	WSYNC
     65  f0a3					      REPEND
     66  f0a5		       85 02		      sta	WSYNC
     65  f0a5					      REPEND
     66  f0a7		       85 02		      sta	WSYNC
     65  f0a7					      REPEND
     66  f0a9		       85 02		      sta	WSYNC
     65  f0a9					      REPEND
     66  f0ab		       85 02		      sta	WSYNC
     65  f0ab					      REPEND
     66  f0ad		       85 02		      sta	WSYNC
     65  f0ad					      REPEND
     66  f0af		       85 02		      sta	WSYNC
     65  f0af					      REPEND
     66  f0b1		       85 02		      sta	WSYNC
     65  f0b1					      REPEND
     66  f0b3		       85 02		      sta	WSYNC
     65  f0b3					      REPEND
     66  f0b5		       85 02		      sta	WSYNC
     65  f0b5					      REPEND
     66  f0b7		       85 02		      sta	WSYNC
     65  f0b7					      REPEND
     66  f0b9		       85 02		      sta	WSYNC
     65  f0b9					      REPEND
     66  f0bb		       85 02		      sta	WSYNC
     65  f0bb					      REPEND
     66  f0bd		       85 02		      sta	WSYNC
     65  f0bd					      REPEND
     66  f0bf		       85 02		      sta	WSYNC
     65  f0bf					      REPEND
     66  f0c1		       85 02		      sta	WSYNC
     65  f0c1					      REPEND
     66  f0c3		       85 02		      sta	WSYNC
     65  f0c3					      REPEND
     66  f0c5		       85 02		      sta	WSYNC
     65  f0c5					      REPEND
     66  f0c7		       85 02		      sta	WSYNC
     65  f0c7					      REPEND
     66  f0c9		       85 02		      sta	WSYNC
     67  f0cb					      REPEND
     68  f0cb		       4c 00 f0 	      jmp	StartFrame	; ...and start it over!
     69  f0ce
     70  f0ce				   Phrase
     71  f0ce		       00		      .BYTE.b	%00000000	; H
     72  f0cf		       42		      .BYTE.b	%01000010
     73  f0d0		       7e		      .BYTE.b	%01111110
     74  f0d1		       42		      .BYTE.b	%01000010
     75  f0d2		       42		      .BYTE.b	%01000010
     76  f0d3		       42		      .BYTE.b	%01000010
     77  f0d4		       00		      .BYTE.b	%00000000
     78  f0d5		       00		      .BYTE.b	%00000000	; E
     79  f0d6		       7e		      .BYTE.b	%01111110
     80  f0d7		       40		      .BYTE.b	%01000000
     81  f0d8		       7c		      .BYTE.b	%01111100
     82  f0d9		       40		      .BYTE.b	%01000000
     83  f0da		       40		      .BYTE.b	%01000000
     84  f0db		       7e		      .BYTE.b	%01111110
     85  f0dc		       00		      .BYTE.b	%00000000
     86  f0dd		       00		      .BYTE.b	%00000000	; L
     87  f0de		       40		      .BYTE.b	%01000000
     88  f0df		       40		      .BYTE.b	%01000000
     89  f0e0		       40		      .BYTE.b	%01000000
     90  f0e1		       40		      .BYTE.b	%01000000
     91  f0e2		       40		      .BYTE.b	%01000000
     92  f0e3		       7e		      .BYTE.b	%01111110
     93  f0e4		       00		      .BYTE.b	%00000000
     94  f0e5		       00		      .BYTE.b	%00000000	; L
     95  f0e6		       40		      .BYTE.b	%01000000
     96  f0e7		       40		      .BYTE.b	%01000000
     97  f0e8		       40		      .BYTE.b	%01000000
     98  f0e9		       40		      .BYTE.b	%01000000
     99  f0ea		       40		      .BYTE.b	%01000000
    100  f0eb		       7e		      .BYTE.b	%01111110
    101  f0ec		       00		      .BYTE.b	%00000000	; O
    102  f0ed		       00		      .BYTE.b	%00000000
    103  f0ee		       3c		      .BYTE.b	%00111100
    104  f0ef		       42		      .BYTE.b	%01000010
    105  f0f0		       42		      .BYTE.b	%01000010
    106  f0f1		       42		      .BYTE.b	%01000010
    107  f0f2		       42		      .BYTE.b	%01000010
    108  f0f3		       3c		      .BYTE.b	%00111100
    109  f0f4		       00		      .BYTE.b	%00000000
    110  f0f5		       00		      .BYTE.b	%00000000	; white space
    111  f0f6		       00		      .BYTE.b	%00000000
    112  f0f7		       00		      .BYTE.b	%00000000
    113  f0f8		       00		      .BYTE.b	%00000000
    114  f0f9		       00		      .BYTE.b	%00000000
    115  f0fa		       00		      .BYTE.b	%00000000
    116  f0fb		       00		      .BYTE.b	%00000000
    117  f0fc		       00		      .BYTE.b	%00000000
    118  f0fd		       00		      .BYTE.b	%00000000	; W
    119  f0fe		       42		      .BYTE.b	%01000010
    120  f0ff		       42		      .BYTE.b	%01000010
    121  f100		       42		      .BYTE.b	%01000010
    122  f101		       42		      .BYTE.b	%01000010
    123  f102		       5a		      .BYTE.b	%01011010
    124  f103		       24		      .BYTE.b	%00100100
    125  f104		       00		      .BYTE.b	%00000000
    126  f105		       00		      .BYTE.b	%00000000	; O
    127  f106		       3c		      .BYTE.b	%00111100
    128  f107		       42		      .BYTE.b	%01000010
    129  f108		       42		      .BYTE.b	%01000010
    130  f109		       42		      .BYTE.b	%01000010
    131  f10a		       42		      .BYTE.b	%01000010
    132  f10b		       3c		      .BYTE.b	%00111100
    133  f10c		       00		      .BYTE.b	%00000000
    134  f10d		       00		      .BYTE.b	%00000000	; R
    135  f10e		       7c		      .BYTE.b	%01111100
    136  f10f		       42		      .BYTE.b	%01000010
    137  f110		       42		      .BYTE.b	%01000010
    138  f111		       7c		      .BYTE.b	%01111100
    139  f112		       44		      .BYTE.b	%01000100
    140  f113		       42		      .BYTE.b	%01000010
    141  f114		       00		      .BYTE.b	%00000000
    142  f115		       00		      .BYTE.b	%00000000	; L
    143  f116		       40		      .BYTE.b	%01000000
    144  f117		       40		      .BYTE.b	%01000000
    145  f118		       40		      .BYTE.b	%01000000
    146  f119		       40		      .BYTE.b	%01000000
    147  f11a		       40		      .BYTE.b	%01000000
    148  f11b		       7e		      .BYTE.b	%01111110
    149  f11c		       00		      .BYTE.b	%00000000
    150  f11d		       00		      .BYTE.b	%00000000	; D
    151  f11e		       78		      .BYTE.b	%01111000
    152  f11f		       44		      .BYTE.b	%01000100
    153  f120		       42		      .BYTE.b	%01000010
    154  f121		       42		      .BYTE.b	%01000010
    155  f122		       44		      .BYTE.b	%01000100
    156  f123		       78		      .BYTE.b	%01111000
    157  f124		       00		      .BYTE.b	%00000000	; Last byte written to PF1 (important, ensures lower tip
    158  f125							;			     of letter "D" won't "bleeed")
    159  f125
    160  fffa					      ORG	$FFFA	; Cart config (so 6502 can start it up)
    161  fffa
    162  fffa		       00 f0		      .WORD.w	StartFrame	;     NMI
    163  fffc		       00 f0		      .WORD.w	StartFrame	;     RESET
    164  fffe		       00 f0		      .WORD.w	StartFrame	;     IRQ
    165  10000
    166  10000					       END
